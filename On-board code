# Berryrocket project
# On-board code
import time
import os
from machine import I2C,RTC,Timer,Pin,PWM
import lps22
import icm20948
from cu import *
from buzzer import *

####################
#### Constantes ####
####################
DEPOTAGE        = True  # Activation of the version with depowering (without parachute hatch)
ACC_IMU         = False  # Activation of acceleration information by the IMU, otherwise by the mechanical switch
BUZZER_ENABLE   = True  # buzzer activation 
ACC_THESHOLD    = 1     # Acceleration threshold to detect takeoff [g]
TIMEOUT_FALLING = 7200  #Time after which the rocket enters free fall mode [ms]
FREQ_ACQ        = 20    # Data acquisition frequency [Hz]
SERVO_OPEN      = 800   # [us]
SERVO_CLOSE     = 1800  # [us]
DEBUG           = False
SOFT_VERSION    = "1.2"

#####################
#### Declaration ####
#####################
# Declaration of the I2C communication bus
i2c = I2C(1,freq=400000)  # default assignment: scl=Pin(7), sda=Pin(6)

# Declaration des capteurs
baro = lps22.LPS22HB(i2c)
imu = icm20948.ICM20948(i2c_bus=i2c)

# Timer declaration 
timerAcq = Timer()

# Declaration of the real-time clock (RTC
rtc = RTC()

# Declaration of the parachute pin
portePara = 0
if DEPOTAGE is False:
    portePara = PWM(Pin(10, Pin.OUT))
    portePara.freq(50) # 50 Hz
# portePara.calibration(700, 2400, 1510, 2500, 2000) # Min pulse, max pulse, middle pulse, 90 deg pulse, 100 speed

# Declaration of the acceleration switch pin
accPin = Pin(28, Pin.IN)

# Dossier des données
dataFolderName = 'data'
dataFolder = dataFolderName+'/'

###################
#### Variables ####
###################
# Initialisation des variables
isSampling      = False
isLaunched      = False
isFalling       = False
accContact      = False
tempsDecollage  = 0
saveData        = True
saveDataFirst   = True

###################
#### Fonctions ####
###################
# Card Initialisation
def InitBoard():
    # Initialization of the date/time
    rtc.datetime((2020,1,1,0,0,0,0,0))

    # Addition of detection for the accelerometer contact
    accPin.irq(trigger=Pin.IRQ_RISING, handler=IrqAcc)

    # Initialization of the acquisition time
    timerAcq.init(freq=FREQ_ACQ, mode=Timer.PERIODIC, callback=Sampling)

def InitPlatFile():
    if dataFolderName not in os.listdir():
        os.mkdir(dataFolderName)

    filePlatform = open(dataFolder+"data_platform.txt","a", encoding="utf-8")
    filePlatform.write(f"########\n")
    filePlatform.write(f"## Version soft : v{SOFT_VERSION:s}\n")
    filePlatform.write(f"## Type fusée : ")
    if (DEPOTAGE is True):
        filePlatform.write(f"Depotage\n")
    else:
        filePlatform.write(f"Trappe parachute\n")
    filePlatform.write(f"## Détection décollage : ")
    if (ACC_IMU is True):
        filePlatform.write(f"IMU mems (icm20948)\n")
    else:
        filePlatform.write(f"Accélero contact\n")
    filePlatform.write(f"## Fenetrage temporel : {TIMEOUT_FALLING:d} ms\n")
    filePlatform.write(f"## Frequence acq données: {FREQ_ACQ:d} Hz\n")
    filePlatform.write(f"# Temps [s] | Pression [mBar] | temperature [°C] | acc X [g] | acc Y [g] | acc Z [g]\n")
    filePlatform.close()

# Activation of data acquisition
def Sampling(timer):
    global isSampling
    #if isSampling is False:
    isSampling = True

def FermetureParachute():
    if DEPOTAGE is False:
        global portePara
        portePara.duty_ns(SERVO_CLOSE*1000)

def OuvertureParachute():
    if DEPOTAGE is False:
        global portePara
        portePara.duty_ns(SERVO_OPEN*1000)

def IrqAcc(p):
    global accContact
    accContact = True

# Main fonction
if __name__ == '__main__':

    # Début initialisation avec son specific
    SetBuzzer(BUZZER_ENABLE, freq=800, tps=0.2)
    time.sleep(0.2)
    SetBuzzer(False)

    #Open the parachute hatch at startup if necessary
   OpenParachute()

    # Waiting to place the parachute hatch if necessary
    # Music Init(BUZZER_ENABLE)
    time.sleep(3)
    
    #Closing the parachute hatch if necessary
    CloseParachute()

    # Initialization of acquisition functions
    InitBoard()

    # Open a file for writing data
    InitPlatFile()
    dataFilePlatBuff = []

    # Execute payload actions at board startup
    CU_Initialisation(baro, imu)

    # Initialization of the initial time
    tempsMsDebut = time.ticks_ms()

    # Initialization completed with specific sound
    SetBuzzer(BUZZER_ENABLE, freq=800, tps=0.2)
    time.sleep(0.6)
    # Configure the buzzer to make a specific sound before liftoff
    SetBuzzer(BUZZER_ENABLE, freq=1000, tps=2)

    while True:
        if isSampling is True:
            # acquisition of the current time
            tempsAcq = time.ticks_diff(time.ticks_ms(), tempsMsDebut)/1000.0

            # Acquisitions from sensors
            ax, ay, az, gx, gy, gz = imu.read_accelerometer_gyro_data()
            # mx, my, mz = imu.read_magnetometer_data()
            pressure = baro.read_pressure()
            temp = baro.read_temperature()

            # If the acceleration exceeds the threshold or the acceleration pin is pressed, and liftoff has not yet occurred, then liftoff has occurred
            if ((ay < -1-ACC_THESHOLD and ACC_IMU is True) or (accContact is True and ACC_IMU is False)) and (isLaunched is False):
                # Change in liftoff indicator status
                isLaunched = True
                # Save liftoff time
                tempsDecollage = time.ticks_ms()
                # Change of buzzer sound
                SetBuzzer(BUZZER_ENABLE, freq=1500, tps=1)
                if DEBUG is True:
                    # Display on the console
                    print('Decollage !')

            # If liftoff has occurred and free fall has not yet occurred
            if (isLaunched is True) and (isFalling is False):
                # If the free fall timer has elapsed
                if (time.ticks_ms()-tempsDecollage > TIMEOUT_FALLING):
                    # Open parachute hatch if necessary 
                    OpenParachute()
                    # Change in free fall status
                    isFalling = True
                    # Change of buzzer sound
                    SetBuzzer(BUZZER_ENABLE, freq=2000, tps=0.5)
                    # Writing the current time of the beginning of free fall to the file
                    filePlatform = open(dataFolder+"data_platform.txt","a", encoding="utf-8")
                    filePlatform.write(f"# Chute libre: {tempsAcq:.3f}s\n")
                    filePlatform.close()
                    if DEBUG is True:
                        # Display on the console
                        print('Chute libre !')
            
            # Formatting of the data to be written to the file (time, pressure, temperature, acceleration x, y, z)
            dataFilePlat = f"{tempsAcq:.3f} {pressure:.1f} {temp:.1f} {ax:.2f} {ay:.2f} {az:.2f}\n"

            # If liftoff has not yet occurred
            if isLaunched is False:
                # Keep the data for 1/2 seconds before liftoff
                dataFilePlatBuff.append(dataFilePlat)
                if (len(dataFilePlatBuff) > FREQ_ACQ/2):
                    del dataFilePlatBuff[0]

                # Execute payload actions before liftoff
                CU_AvantDecollage(tempsAcq, baro, imu)

            # If liftoff has occurred
            else:
                if saveData is False:
                    # Backup RAM before writing
                    dataFilePlatBuff.append(dataFilePlat)
                    if (len(dataFilePlatBuff) >= FREQ_ACQ/2):
                        saveData = True
                elif saveData is True:
                    #Write multiple measurement points to the file
                    filePlatform = open(dataFolder+"data_platform.txt","a", encoding="utf-8")
                    for dataEl in dataFilePlatBuff:
                        filePlatform.write(dataEl)
                    dataFilePlatBuff = []
                    if saveDataFirst is True:
                        filePlatform.write(f"# Decollage: {tempsAcq:.3f}s\n")
                        saveDataFirst = False
                    filePlatform.write(dataFilePlat)
                    filePlatform.close()
                    saveData = False

                #Execute payload actions after liftoff
                CU_ApresDecollage(tempsAcq, baro, imu)

            # If the rocket is in free fall
            if isFalling is True:
                # Execute payload actions during descent
                CU_Redescente(tempsAcq, baro, imu)

            # Resetting the indicator for the acquisition timer
            isSampling = False

            if DEBUG is True:
                # Displaying the results on the console
                tempsRtc = rtc.datetime()
                print(f'\nTime:        {tempsRtc[4]:d}h{tempsRtc[5]:d}m{tempsRtc[6]:d}s / {tempsAcq:.2f}')
                print(f'Acceleration:  X = {ax:.2f} , Y = {ay:.2f} , Z = {az:.2f}')
                print(f'Gyroscope:     X = {gx:.2f} , Y = {gy:.2f} , Z = {gz:.2f}')
                # print(f'Magnetic:      X = {mx:.2f} , Y = {my:.2f} , Z = {mz:.2f}')
                print(f'Pressure:      P = {pressure:.2f} hPa')
                print(f'Temperature:   T = {temp:.2f} °C')
                print(f'Acc contact:   {accContact:.1d}')
